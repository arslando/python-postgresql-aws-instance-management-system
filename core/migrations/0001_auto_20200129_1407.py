# Generated by Django 3.0.2 on 2020-01-29 14:07

import core.fields
from django.conf import settings
import django.contrib.postgres.fields
import django.contrib.postgres.fields.hstore
import django.contrib.postgres.fields.jsonb
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('account', '0001_initial'),
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('core', 'hstore_extension'),
    ]

    operations = [
        migrations.CreateModel(
            name='IaaS',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(blank=True, max_length=100)),
                ('label', models.CharField(blank=True, max_length=200)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('action', models.CharField(blank=True, choices=[('start', 'Start'), ('stop', 'Stop'), ('check', 'Check'), ('deploy', 'Deploy'), ('reconfigure', 'Reconfigure'), ('remove', 'Remove')], default='start', max_length=200)),
                ('ahomefile', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('target', models.CharField(blank=True, max_length=200)),
                ('kind', models.CharField(default='generic', max_length=200)),
                ('hosted', models.CharField(blank=True, max_length=200)),
                ('opts', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('status', models.CharField(blank=True, choices=[('new', 'New'), ('pending', 'Pending'), ('waiting', 'Waiting'), ('starting', 'Starting'), ('running', 'Running'), ('successful', 'Successful'), ('failed', 'Failed'), ('error', 'Error'), ('canceled', 'Canceled')], default='running', max_length=200)),
                ('output', models.CharField(blank=True, max_length=200)),
                ('ident', models.CharField(blank=True, max_length=200)),
                ('uuid', models.UUIDField(default=uuid.uuid4)),
                ('cloud', models.BooleanField(default=False, verbose_name='cloud based')),
                ('unique_keys', django.contrib.postgres.fields.hstore.HStoreField(blank=True, default=dict, help_text='Unique key(s) for ansible callback', null=True, verbose_name='unique keys')),
                ('source', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('credentials', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('definition', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('facts', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('setfacts', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('inputs', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('applications', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True, default=list, size=None)),
                ('schema', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('runner', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('iaas', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='iaass', to='core.IaaS')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Job',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(blank=True, max_length=100)),
                ('ident', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('status', models.CharField(blank=True, max_length=100)),
                ('rc', models.CharField(blank=True, max_length=100)),
                ('stats', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('logs', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('artifacts', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('stdout', models.TextField(blank=True, null=True)),
                ('inventory', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('command', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('private_data_dir', models.CharField(blank=True, max_length=100)),
                ('namespace', models.CharField(blank=True, max_length=100)),
                ('kind', models.CharField(blank=True, default='job', max_length=200)),
                ('start_time', models.DateField(auto_now_add=True, null=True)),
                ('finish_time', models.DateTimeField(auto_now=True, null=True)),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='jobs', to='account.Organization')),
            ],
            options={
                'ordering': ['ident'],
                'unique_together': {('ident', 'name', 'organization')},
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=50)),
                ('uuid', models.UUIDField(default=uuid.uuid4)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('kind', models.CharField(choices=[('default', 'default')], default='default', max_length=12)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='projects', to='account.Organization')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=60, unique=True)),
                ('font_awesome', models.CharField(max_length=60)),
            ],
        ),
        migrations.CreateModel(
            name='UserCredential',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(blank=True, max_length=100)),
                ('label', models.CharField(blank=True, max_length=200)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('action', models.CharField(blank=True, choices=[('start', 'Start'), ('stop', 'Stop'), ('check', 'Check'), ('deploy', 'Deploy'), ('reconfigure', 'Reconfigure'), ('remove', 'Remove')], default='start', max_length=200)),
                ('ahomefile', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('target', models.CharField(blank=True, max_length=200)),
                ('kind', models.CharField(default='generic', max_length=200)),
                ('hosted', models.CharField(blank=True, max_length=200)),
                ('opts', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('status', models.CharField(blank=True, choices=[('new', 'New'), ('pending', 'Pending'), ('waiting', 'Waiting'), ('starting', 'Starting'), ('running', 'Running'), ('successful', 'Successful'), ('failed', 'Failed'), ('error', 'Error'), ('canceled', 'Canceled')], default='running', max_length=200)),
                ('output', models.CharField(blank=True, max_length=200)),
                ('ident', models.CharField(blank=True, max_length=200)),
                ('uuid', models.UUIDField(default=uuid.uuid4)),
                ('cloud', models.BooleanField(default=False, verbose_name='cloud based')),
                ('unique_keys', django.contrib.postgres.fields.hstore.HStoreField(blank=True, default=dict, help_text='Unique key(s) for ansible callback', null=True, verbose_name='unique keys')),
                ('source', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('credentials', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('definition', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('facts', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('setfacts', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('inputs', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('applications', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True, default=list, size=None)),
                ('schema', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('runner', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('iaas', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='usercredentials', to='core.IaaS')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='usercredentials', to='core.Project')),
                ('tags', models.ManyToManyField(blank=True, help_text='Select tag(s)', to='core.Tag', verbose_name='tags')),
            ],
            options={
                'verbose_name': 'User Credential',
                'verbose_name_plural': 'User Credentials',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='WizardBox',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=50)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('kind', models.CharField(default='generic', max_length=200)),
                ('schema', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('inputs', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='wizardboxes', to='account.Organization')),
            ],
            options={
                'verbose_name': 'WizardBox',
                'verbose_name_plural': 'WizardBoxes',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Vrf',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=50)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('rd', models.CharField(max_length=21, verbose_name='Route distinguisher')),
                ('enforce_unique', models.BooleanField(default=True, help_text='Prevent duplicate prefixes/IP addresses within this VRF', verbose_name='Enforce unique space')),
                ('hosted', models.CharField(blank=True, max_length=200, null=True)),
                ('definition', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('kind', models.CharField(blank=True, default='vrf', max_length=200)),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='vrfs', to='core.Project')),
            ],
            options={
                'verbose_name': 'VRF',
                'verbose_name_plural': 'VRFs',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Vlan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('vid', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(4094)], verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('status', models.PositiveSmallIntegerField(choices=[(1, 'Active'), (2, 'Reserved'), (3, 'Deprecated')], default=1, verbose_name='Status')),
                ('description', models.CharField(blank=True, max_length=100)),
                ('hosted', models.CharField(blank=True, max_length=200, null=True)),
                ('kind', models.CharField(blank=True, default='vlan', max_length=200)),
                ('definition', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='vlans', to='core.Project')),
            ],
            options={
                'verbose_name': 'VLAN',
                'verbose_name_plural': 'VLANs',
                'ordering': ['project', 'vid'],
            },
        ),
        migrations.CreateModel(
            name='VirtualMachine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(blank=True, max_length=100)),
                ('label', models.CharField(blank=True, max_length=100, null=True)),
                ('description', models.CharField(blank=True, max_length=100)),
                ('fqdn', models.CharField(blank=True, max_length=200)),
                ('model', models.CharField(blank=True, max_length=200)),
                ('kind', models.CharField(default='generic', max_length=200)),
                ('uuid', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('sn', models.CharField(blank=True, help_text='Specifies the serial number of the device if exist', max_length=200, verbose_name='Serial Number')),
                ('credentials', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('inputs', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('schema', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('cloud', models.BooleanField(default=False, verbose_name='cloud based')),
                ('primary_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('primary_ip6', models.GenericIPAddressField(blank=True, null=True)),
                ('primary_mac', models.CharField(blank=True, max_length=200)),
                ('primary_domain', models.CharField(blank=True, max_length=200)),
                ('status', models.CharField(blank=True, choices=[('new', 'New'), ('pending', 'Pending'), ('waiting', 'Waiting'), ('starting', 'Starting'), ('running', 'Running'), ('successful', 'Successful'), ('failed', 'Failed'), ('error', 'Error'), ('canceled', 'Canceled')], default='running', max_length=200)),
                ('action', models.CharField(blank=True, choices=[('start', 'Start'), ('stop', 'Stop'), ('check', 'Check'), ('deploy', 'Deploy'), ('reconfigure', 'Reconfigure'), ('remove', 'Remove')], default='start', max_length=200)),
                ('facts', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('setfacts', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('applications', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True, default=list, size=None)),
                ('ident', models.CharField(blank=True, max_length=200)),
                ('definition', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('unique_keys', django.contrib.postgres.fields.hstore.HStoreField(blank=True, default=dict, help_text='Unique key(s) for ansible callback', null=True, verbose_name='unique keys')),
                ('hosted', models.CharField(blank=True, max_length=200, null=True)),
                ('processors', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('disks', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('lvm', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('lsblk', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('mounts', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('memory', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('ipaddresses', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('ipv4', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('ipv6', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('interfaces', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('svc', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('containers', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('hardware', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('os', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('runner', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('cost', models.FloatField(default=0.0)),
                ('iaas', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='virtualmachines', to='core.IaaS')),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='virtualmachines', to='core.Project')),
                ('tags', models.ManyToManyField(blank=True, help_text='Select tag(s)', to='core.Tag', verbose_name='tags')),
                ('usercredential', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='virtualmachines', to='core.UserCredential')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='UserSecret',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=50)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('kind', models.CharField(choices=[('sshkey', 'SSH Key'), ('secret', 'Username and Password'), ('custom', 'Custom authentication')], default='sshkey', max_length=200)),
                ('fingerprint', models.CharField(blank=True, max_length=250)),
                ('schema', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('injector', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('inputs', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('cloud', models.BooleanField(default=False, verbose_name='cloud key')),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='usersecrets', to='account.Organization')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Secret',
                'verbose_name_plural': 'User Secrets',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='UserProject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('user', 'user'), ('owner', 'owner'), ('admin', 'admin'), ('visitor', 'visitor')], default='visitor', max_length=12)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='core.Project')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'project')},
            },
        ),
        migrations.CreateModel(
            name='UserKey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=50)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('kind', models.CharField(choices=[('sshkey', 'SSH Key'), ('secret', 'Username and Password'), ('custom', 'Custom authentication')], default='sshkey', max_length=200)),
                ('schema', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('injector', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('inputs', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('cloud', models.BooleanField(default=False, verbose_name='cloud key')),
                ('keykind', models.CharField(default='rsa', max_length=200)),
                ('keysize', models.IntegerField(default=2048)),
                ('fingerprint', models.CharField(blank=True, max_length=250)),
                ('publickey', models.TextField(blank=True, null=True)),
                ('privatekey', models.TextField(blank=True, null=True)),
                ('passphrase', models.CharField(blank=True, max_length=250, null=True)),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='userkeys', to='account.Organization')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Key',
                'verbose_name_plural': 'User Keys',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Storage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(blank=True, max_length=100)),
                ('label', models.CharField(blank=True, max_length=200)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('action', models.CharField(blank=True, choices=[('start', 'Start'), ('stop', 'Stop'), ('check', 'Check'), ('deploy', 'Deploy'), ('reconfigure', 'Reconfigure'), ('remove', 'Remove')], default='start', max_length=200)),
                ('ahomefile', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('target', models.CharField(blank=True, max_length=200)),
                ('kind', models.CharField(default='generic', max_length=200)),
                ('hosted', models.CharField(blank=True, max_length=200)),
                ('opts', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('status', models.CharField(blank=True, choices=[('new', 'New'), ('pending', 'Pending'), ('waiting', 'Waiting'), ('starting', 'Starting'), ('running', 'Running'), ('successful', 'Successful'), ('failed', 'Failed'), ('error', 'Error'), ('canceled', 'Canceled')], default='running', max_length=200)),
                ('output', models.CharField(blank=True, max_length=200)),
                ('ident', models.CharField(blank=True, max_length=200)),
                ('uuid', models.UUIDField(default=uuid.uuid4)),
                ('cloud', models.BooleanField(default=False, verbose_name='cloud based')),
                ('unique_keys', django.contrib.postgres.fields.hstore.HStoreField(blank=True, default=dict, help_text='Unique key(s) for ansible callback', null=True, verbose_name='unique keys')),
                ('source', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('credentials', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('definition', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('facts', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('setfacts', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('inputs', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('applications', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True, default=list, size=None)),
                ('schema', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('runner', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('iaas', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='storages', to='core.IaaS')),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='storages', to='core.Project')),
                ('tags', models.ManyToManyField(blank=True, help_text='Select tag(s)', to='core.Tag', verbose_name='tags')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(blank=True, max_length=100)),
                ('label', models.CharField(blank=True, max_length=200)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('action', models.CharField(blank=True, choices=[('start', 'Start'), ('stop', 'Stop'), ('check', 'Check'), ('deploy', 'Deploy'), ('reconfigure', 'Reconfigure'), ('remove', 'Remove')], default='start', max_length=200)),
                ('ahomefile', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('target', models.CharField(blank=True, max_length=200)),
                ('kind', models.CharField(default='generic', max_length=200)),
                ('hosted', models.CharField(blank=True, max_length=200)),
                ('opts', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('status', models.CharField(blank=True, choices=[('new', 'New'), ('pending', 'Pending'), ('waiting', 'Waiting'), ('starting', 'Starting'), ('running', 'Running'), ('successful', 'Successful'), ('failed', 'Failed'), ('error', 'Error'), ('canceled', 'Canceled')], default='running', max_length=200)),
                ('output', models.CharField(blank=True, max_length=200)),
                ('ident', models.CharField(blank=True, max_length=200)),
                ('uuid', models.UUIDField(default=uuid.uuid4)),
                ('cloud', models.BooleanField(default=False, verbose_name='cloud based')),
                ('unique_keys', django.contrib.postgres.fields.hstore.HStoreField(blank=True, default=dict, help_text='Unique key(s) for ansible callback', null=True, verbose_name='unique keys')),
                ('source', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('credentials', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('definition', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('facts', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('setfacts', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('inputs', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('applications', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True, default=list, size=None)),
                ('schema', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('runner', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('iaas', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='services', to='core.IaaS')),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='services', to='core.Project')),
                ('tags', models.ManyToManyField(blank=True, help_text='Select tag(s)', to='core.Tag', verbose_name='tags')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Security',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(blank=True, max_length=100)),
                ('label', models.CharField(blank=True, max_length=200)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('action', models.CharField(blank=True, choices=[('start', 'Start'), ('stop', 'Stop'), ('check', 'Check'), ('deploy', 'Deploy'), ('reconfigure', 'Reconfigure'), ('remove', 'Remove')], default='start', max_length=200)),
                ('ahomefile', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('target', models.CharField(blank=True, max_length=200)),
                ('kind', models.CharField(default='generic', max_length=200)),
                ('hosted', models.CharField(blank=True, max_length=200)),
                ('opts', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('status', models.CharField(blank=True, choices=[('new', 'New'), ('pending', 'Pending'), ('waiting', 'Waiting'), ('starting', 'Starting'), ('running', 'Running'), ('successful', 'Successful'), ('failed', 'Failed'), ('error', 'Error'), ('canceled', 'Canceled')], default='running', max_length=200)),
                ('output', models.CharField(blank=True, max_length=200)),
                ('ident', models.CharField(blank=True, max_length=200)),
                ('uuid', models.UUIDField(default=uuid.uuid4)),
                ('cloud', models.BooleanField(default=False, verbose_name='cloud based')),
                ('unique_keys', django.contrib.postgres.fields.hstore.HStoreField(blank=True, default=dict, help_text='Unique key(s) for ansible callback', null=True, verbose_name='unique keys')),
                ('source', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('credentials', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('definition', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('facts', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('setfacts', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('inputs', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('applications', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True, default=list, size=None)),
                ('schema', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('runner', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('iaas', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='securitys', to='core.IaaS')),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='securitys', to='core.Project')),
                ('tags', models.ManyToManyField(blank=True, help_text='Select tag(s)', to='core.Tag', verbose_name='tags')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Sdn',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(blank=True, max_length=100)),
                ('label', models.CharField(blank=True, max_length=200)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('action', models.CharField(blank=True, choices=[('start', 'Start'), ('stop', 'Stop'), ('check', 'Check'), ('deploy', 'Deploy'), ('reconfigure', 'Reconfigure'), ('remove', 'Remove')], default='start', max_length=200)),
                ('ahomefile', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('target', models.CharField(blank=True, max_length=200)),
                ('kind', models.CharField(default='generic', max_length=200)),
                ('hosted', models.CharField(blank=True, max_length=200)),
                ('opts', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('status', models.CharField(blank=True, choices=[('new', 'New'), ('pending', 'Pending'), ('waiting', 'Waiting'), ('starting', 'Starting'), ('running', 'Running'), ('successful', 'Successful'), ('failed', 'Failed'), ('error', 'Error'), ('canceled', 'Canceled')], default='running', max_length=200)),
                ('output', models.CharField(blank=True, max_length=200)),
                ('ident', models.CharField(blank=True, max_length=200)),
                ('uuid', models.UUIDField(default=uuid.uuid4)),
                ('cloud', models.BooleanField(default=False, verbose_name='cloud based')),
                ('unique_keys', django.contrib.postgres.fields.hstore.HStoreField(blank=True, default=dict, help_text='Unique key(s) for ansible callback', null=True, verbose_name='unique keys')),
                ('source', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('credentials', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('definition', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('facts', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('setfacts', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('inputs', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('applications', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True, default=list, size=None)),
                ('schema', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('runner', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('iaas', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='sdns', to='core.IaaS')),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='sdns', to='core.Project')),
                ('tags', models.ManyToManyField(blank=True, help_text='Select tag(s)', to='core.Tag', verbose_name='tags')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='RunnerTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('obj', models.CharField(max_length=100)),
                ('obj_id', models.IntegerField(default=0)),
                ('state', models.CharField(default='New', max_length=100)),
                ('ident', models.CharField(max_length=100)),
            ],
            options={
                'ordering': ['obj', 'obj_id', 'state'],
                'unique_together': {('obj', 'obj_id', 'state', 'ident')},
            },
        ),
        migrations.CreateModel(
            name='Rir',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=50)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('registry', models.CharField(blank=True, max_length=200, null=True, verbose_name='Internet Registry')),
                ('region', models.CharField(blank=True, max_length=200, null=True)),
                ('hosted', models.CharField(blank=True, max_length=200, null=True)),
                ('definition', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('kind', models.CharField(blank=True, default='rir', max_length=200)),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='rirs', to='core.Project')),
            ],
            options={
                'verbose_name': 'RIR',
                'verbose_name_plural': 'RIRs',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ResourceAliveHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('resource_id', models.PositiveIntegerField(db_index=True)),
                ('resource_status', models.CharField(max_length=16)),
                ('task_id', models.UUIDField(null=True)),
                ('task_mode', models.CharField(max_length=16)),
                ('task_initialised', models.DateTimeField(auto_now_add=True)),
                ('task_completed', models.DateTimeField(null=True)),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='contenttypes.ContentType')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='Provider',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(blank=True, max_length=100)),
                ('label', models.CharField(blank=True, max_length=200)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('action', models.CharField(blank=True, choices=[('start', 'Start'), ('stop', 'Stop'), ('check', 'Check'), ('deploy', 'Deploy'), ('reconfigure', 'Reconfigure'), ('remove', 'Remove')], default='start', max_length=200)),
                ('ahomefile', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('target', models.CharField(blank=True, max_length=200)),
                ('kind', models.CharField(default='generic', max_length=200)),
                ('hosted', models.CharField(blank=True, max_length=200)),
                ('opts', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('status', models.CharField(blank=True, choices=[('new', 'New'), ('pending', 'Pending'), ('waiting', 'Waiting'), ('starting', 'Starting'), ('running', 'Running'), ('successful', 'Successful'), ('failed', 'Failed'), ('error', 'Error'), ('canceled', 'Canceled')], default='running', max_length=200)),
                ('output', models.CharField(blank=True, max_length=200)),
                ('ident', models.CharField(blank=True, max_length=200)),
                ('uuid', models.UUIDField(default=uuid.uuid4)),
                ('cloud', models.BooleanField(default=False, verbose_name='cloud based')),
                ('unique_keys', django.contrib.postgres.fields.hstore.HStoreField(blank=True, default=dict, help_text='Unique key(s) for ansible callback', null=True, verbose_name='unique keys')),
                ('source', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('credentials', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('definition', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('facts', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('setfacts', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('inputs', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('applications', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True, default=list, size=None)),
                ('schema', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('runner', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('iaas', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='providers', to='core.IaaS')),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='providers', to='core.Project')),
                ('tags', models.ManyToManyField(blank=True, help_text='Select tag(s)', to='core.Tag', verbose_name='tags')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='project',
            name='users',
            field=models.ManyToManyField(related_name='user_set', through='core.UserProject', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Prefix',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('family', models.PositiveSmallIntegerField(choices=[(4, 'IPv4'), (6, 'IPv6')], editable=False)),
                ('prefix', core.fields.IPNetworkField(help_text='IPv4 or IPv6 network with mask')),
                ('status', models.PositiveSmallIntegerField(choices=[(0, 'Container'), (1, 'Active'), (2, 'Reserved'), (3, 'Deprecated')], default=1, help_text='Operational status of this prefix', verbose_name='Status')),
                ('is_pool', models.BooleanField(default=False, help_text='All IP addresses within this prefix are considered usable', verbose_name='Is a pool')),
                ('description', models.CharField(blank=True, max_length=100)),
                ('hosted', models.CharField(blank=True, max_length=200, null=True)),
                ('kind', models.CharField(blank=True, default='prefix', max_length=200)),
                ('label', models.CharField(blank=True, max_length=100, null=True)),
                ('definition', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('connected', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='prefixs', to='core.Project')),
                ('vlan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='prefixes', to='core.Vlan')),
                ('vrf', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='prefixes', to='core.Vrf')),
            ],
            options={
                'verbose_name_plural': 'prefixes',
                'ordering': ['vrf', 'family', 'prefix'],
            },
        ),
        migrations.CreateModel(
            name='Pki',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(blank=True, max_length=100)),
                ('label', models.CharField(blank=True, max_length=200)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('action', models.CharField(blank=True, choices=[('start', 'Start'), ('stop', 'Stop'), ('check', 'Check'), ('deploy', 'Deploy'), ('reconfigure', 'Reconfigure'), ('remove', 'Remove')], default='start', max_length=200)),
                ('ahomefile', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('target', models.CharField(blank=True, max_length=200)),
                ('kind', models.CharField(default='generic', max_length=200)),
                ('hosted', models.CharField(blank=True, max_length=200)),
                ('opts', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('status', models.CharField(blank=True, choices=[('new', 'New'), ('pending', 'Pending'), ('waiting', 'Waiting'), ('starting', 'Starting'), ('running', 'Running'), ('successful', 'Successful'), ('failed', 'Failed'), ('error', 'Error'), ('canceled', 'Canceled')], default='running', max_length=200)),
                ('output', models.CharField(blank=True, max_length=200)),
                ('ident', models.CharField(blank=True, max_length=200)),
                ('uuid', models.UUIDField(default=uuid.uuid4)),
                ('cloud', models.BooleanField(default=False, verbose_name='cloud based')),
                ('unique_keys', django.contrib.postgres.fields.hstore.HStoreField(blank=True, default=dict, help_text='Unique key(s) for ansible callback', null=True, verbose_name='unique keys')),
                ('source', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('credentials', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('definition', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('facts', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('setfacts', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('inputs', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('applications', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True, default=list, size=None)),
                ('schema', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('runner', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('iaas', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='pkis', to='core.IaaS')),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='pkis', to='core.Project')),
                ('tags', models.ManyToManyField(blank=True, help_text='Select tag(s)', to='core.Tag', verbose_name='tags')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='PaaS',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(blank=True, max_length=100)),
                ('label', models.CharField(blank=True, max_length=200)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('action', models.CharField(blank=True, choices=[('start', 'Start'), ('stop', 'Stop'), ('check', 'Check'), ('deploy', 'Deploy'), ('reconfigure', 'Reconfigure'), ('remove', 'Remove')], default='start', max_length=200)),
                ('ahomefile', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('target', models.CharField(blank=True, max_length=200)),
                ('kind', models.CharField(default='generic', max_length=200)),
                ('hosted', models.CharField(blank=True, max_length=200)),
                ('opts', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('status', models.CharField(blank=True, choices=[('new', 'New'), ('pending', 'Pending'), ('waiting', 'Waiting'), ('starting', 'Starting'), ('running', 'Running'), ('successful', 'Successful'), ('failed', 'Failed'), ('error', 'Error'), ('canceled', 'Canceled')], default='running', max_length=200)),
                ('output', models.CharField(blank=True, max_length=200)),
                ('ident', models.CharField(blank=True, max_length=200)),
                ('uuid', models.UUIDField(default=uuid.uuid4)),
                ('cloud', models.BooleanField(default=False, verbose_name='cloud based')),
                ('unique_keys', django.contrib.postgres.fields.hstore.HStoreField(blank=True, default=dict, help_text='Unique key(s) for ansible callback', null=True, verbose_name='unique keys')),
                ('source', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('credentials', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('definition', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('facts', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('setfacts', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('inputs', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('applications', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True, default=list, size=None)),
                ('schema', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('runner', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('iaas', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='paass', to='core.IaaS')),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='paass', to='core.Project')),
                ('tags', models.ManyToManyField(blank=True, help_text='Select tag(s)', to='core.Tag', verbose_name='tags')),
                ('usercredential', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='paass', to='core.UserCredential')),
                ('userkey', models.ManyToManyField(blank=True, related_name='paass', to='core.UserKey')),
                ('usersecret', models.ManyToManyField(blank=True, related_name='paass', to='core.UserSecret')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='NetworkGear',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(blank=True, max_length=100)),
                ('label', models.CharField(blank=True, max_length=100, null=True)),
                ('description', models.CharField(blank=True, max_length=100)),
                ('fqdn', models.CharField(blank=True, max_length=200)),
                ('model', models.CharField(blank=True, max_length=200)),
                ('kind', models.CharField(default='generic', max_length=200)),
                ('uuid', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('sn', models.CharField(blank=True, help_text='Specifies the serial number of the device if exist', max_length=200, verbose_name='Serial Number')),
                ('credentials', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('inputs', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('schema', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('cloud', models.BooleanField(default=False, verbose_name='cloud based')),
                ('primary_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('primary_ip6', models.GenericIPAddressField(blank=True, null=True)),
                ('primary_mac', models.CharField(blank=True, max_length=200)),
                ('primary_domain', models.CharField(blank=True, max_length=200)),
                ('status', models.CharField(blank=True, choices=[('new', 'New'), ('pending', 'Pending'), ('waiting', 'Waiting'), ('starting', 'Starting'), ('running', 'Running'), ('successful', 'Successful'), ('failed', 'Failed'), ('error', 'Error'), ('canceled', 'Canceled')], default='running', max_length=200)),
                ('action', models.CharField(blank=True, choices=[('start', 'Start'), ('stop', 'Stop'), ('check', 'Check'), ('deploy', 'Deploy'), ('reconfigure', 'Reconfigure'), ('remove', 'Remove')], default='start', max_length=200)),
                ('facts', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('setfacts', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('applications', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True, default=list, size=None)),
                ('ident', models.CharField(blank=True, max_length=200)),
                ('definition', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('unique_keys', django.contrib.postgres.fields.hstore.HStoreField(blank=True, default=dict, help_text='Unique key(s) for ansible callback', null=True, verbose_name='unique keys')),
                ('hosted', models.CharField(blank=True, max_length=200, null=True)),
                ('processors', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('disks', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('lvm', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('lsblk', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('mounts', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('memory', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('ipaddresses', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('ipv4', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('ipv6', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('interfaces', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('svc', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('containers', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('hardware', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('os', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('runner', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='networkgears', to='core.Project')),
                ('tags', models.ManyToManyField(blank=True, help_text='Select tag(s)', to='core.Tag', verbose_name='tags')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Monitoring',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(blank=True, max_length=100)),
                ('label', models.CharField(blank=True, max_length=200)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('action', models.CharField(blank=True, choices=[('start', 'Start'), ('stop', 'Stop'), ('check', 'Check'), ('deploy', 'Deploy'), ('reconfigure', 'Reconfigure'), ('remove', 'Remove')], default='start', max_length=200)),
                ('ahomefile', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('target', models.CharField(blank=True, max_length=200)),
                ('kind', models.CharField(default='generic', max_length=200)),
                ('hosted', models.CharField(blank=True, max_length=200)),
                ('opts', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('status', models.CharField(blank=True, choices=[('new', 'New'), ('pending', 'Pending'), ('waiting', 'Waiting'), ('starting', 'Starting'), ('running', 'Running'), ('successful', 'Successful'), ('failed', 'Failed'), ('error', 'Error'), ('canceled', 'Canceled')], default='running', max_length=200)),
                ('output', models.CharField(blank=True, max_length=200)),
                ('ident', models.CharField(blank=True, max_length=200)),
                ('uuid', models.UUIDField(default=uuid.uuid4)),
                ('cloud', models.BooleanField(default=False, verbose_name='cloud based')),
                ('unique_keys', django.contrib.postgres.fields.hstore.HStoreField(blank=True, default=dict, help_text='Unique key(s) for ansible callback', null=True, verbose_name='unique keys')),
                ('source', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('credentials', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('definition', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('facts', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('setfacts', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('inputs', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('applications', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True, default=list, size=None)),
                ('schema', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('runner', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('iaas', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='monitorings', to='core.IaaS')),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='monitorings', to='core.Project')),
                ('tags', models.ManyToManyField(blank=True, help_text='Select tag(s)', to='core.Tag', verbose_name='tags')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='JobEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('counter', models.IntegerField(blank=True, default=0)),
                ('stdout', models.TextField(blank=True)),
                ('start_line', models.IntegerField(blank=True, default=0)),
                ('end_line', models.IntegerField(blank=True, default=0)),
                ('runner_ident', models.CharField(blank=True, max_length=100)),
                ('event', models.CharField(blank=True, max_length=100)),
                ('pid', models.IntegerField(blank=True, default=0, null=True)),
                ('parent_uuid', models.CharField(blank=True, max_length=100)),
                ('event_data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('namespace', models.CharField(blank=True, max_length=100)),
                ('kind', models.CharField(blank=True, default='job_event', max_length=200)),
                ('job', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='jobevents', to='core.Job')),
            ],
            options={
                'ordering': ['uuid', 'counter', 'event'],
            },
        ),
        migrations.CreateModel(
            name='IPAddress',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('family', models.PositiveSmallIntegerField(choices=[(4, 'IPv4'), (6, 'IPv6')], editable=False)),
                ('address', core.fields.IPAddressField(help_text='IPv4 or IPv6 address (with mask)')),
                ('status', models.PositiveSmallIntegerField(choices=[(1, 'Active'), (2, 'Reserved'), (3, 'Deprecated'), (5, 'DHCP')], default=1, help_text='The operational status of this IP', verbose_name='Status')),
                ('description', models.CharField(blank=True, max_length=100)),
                ('hosted', models.CharField(blank=True, max_length=200, null=True)),
                ('label', models.CharField(blank=True, max_length=100, null=True)),
                ('kind', models.CharField(blank=True, default='ip_address', max_length=200)),
                ('connected', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('definition', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='ipaddresss', to='core.Project')),
                ('vrf', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='ip_addresses', to='core.Vrf')),
            ],
            options={
                'verbose_name': 'IP address',
                'verbose_name_plural': 'IP addresses',
                'ordering': ['family', 'address'],
            },
        ),
        migrations.AddField(
            model_name='iaas',
            name='project',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='iaass', to='core.Project'),
        ),
        migrations.AddField(
            model_name='iaas',
            name='tags',
            field=models.ManyToManyField(blank=True, help_text='Select tag(s)', to='core.Tag', verbose_name='tags'),
        ),
        migrations.AddField(
            model_name='iaas',
            name='usercredential',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='iaass', to='core.UserCredential'),
        ),
        migrations.AddField(
            model_name='iaas',
            name='userkey',
            field=models.ManyToManyField(blank=True, related_name='iaass', to='core.UserKey'),
        ),
        migrations.AddField(
            model_name='iaas',
            name='usersecret',
            field=models.ManyToManyField(blank=True, related_name='iaass', to='core.UserSecret'),
        ),
        migrations.CreateModel(
            name='Documentation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(blank=True, max_length=100)),
                ('label', models.CharField(blank=True, max_length=200)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('action', models.CharField(blank=True, choices=[('start', 'Start'), ('stop', 'Stop'), ('check', 'Check'), ('deploy', 'Deploy'), ('reconfigure', 'Reconfigure'), ('remove', 'Remove')], default='start', max_length=200)),
                ('ahomefile', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('target', models.CharField(blank=True, max_length=200)),
                ('kind', models.CharField(default='generic', max_length=200)),
                ('hosted', models.CharField(blank=True, max_length=200)),
                ('opts', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('status', models.CharField(blank=True, choices=[('new', 'New'), ('pending', 'Pending'), ('waiting', 'Waiting'), ('starting', 'Starting'), ('running', 'Running'), ('successful', 'Successful'), ('failed', 'Failed'), ('error', 'Error'), ('canceled', 'Canceled')], default='running', max_length=200)),
                ('output', models.CharField(blank=True, max_length=200)),
                ('ident', models.CharField(blank=True, max_length=200)),
                ('uuid', models.UUIDField(default=uuid.uuid4)),
                ('cloud', models.BooleanField(default=False, verbose_name='cloud based')),
                ('unique_keys', django.contrib.postgres.fields.hstore.HStoreField(blank=True, default=dict, help_text='Unique key(s) for ansible callback', null=True, verbose_name='unique keys')),
                ('source', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('credentials', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('definition', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('facts', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('setfacts', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('inputs', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('applications', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True, default=list, size=None)),
                ('schema', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('runner', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('iaas', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='documentations', to='core.IaaS')),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='documentations', to='core.Project')),
                ('tags', models.ManyToManyField(blank=True, help_text='Select tag(s)', to='core.Tag', verbose_name='tags')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(blank=True, max_length=100)),
                ('label', models.CharField(blank=True, max_length=100, null=True)),
                ('description', models.CharField(blank=True, max_length=100)),
                ('fqdn', models.CharField(blank=True, max_length=200)),
                ('model', models.CharField(blank=True, max_length=200)),
                ('kind', models.CharField(default='generic', max_length=200)),
                ('uuid', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('sn', models.CharField(blank=True, help_text='Specifies the serial number of the device if exist', max_length=200, verbose_name='Serial Number')),
                ('credentials', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('inputs', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('schema', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('cloud', models.BooleanField(default=False, verbose_name='cloud based')),
                ('primary_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('primary_ip6', models.GenericIPAddressField(blank=True, null=True)),
                ('primary_mac', models.CharField(blank=True, max_length=200)),
                ('primary_domain', models.CharField(blank=True, max_length=200)),
                ('status', models.CharField(blank=True, choices=[('new', 'New'), ('pending', 'Pending'), ('waiting', 'Waiting'), ('starting', 'Starting'), ('running', 'Running'), ('successful', 'Successful'), ('failed', 'Failed'), ('error', 'Error'), ('canceled', 'Canceled')], default='running', max_length=200)),
                ('action', models.CharField(blank=True, choices=[('start', 'Start'), ('stop', 'Stop'), ('check', 'Check'), ('deploy', 'Deploy'), ('reconfigure', 'Reconfigure'), ('remove', 'Remove')], default='start', max_length=200)),
                ('facts', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('setfacts', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('applications', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True, default=list, size=None)),
                ('ident', models.CharField(blank=True, max_length=200)),
                ('definition', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('unique_keys', django.contrib.postgres.fields.hstore.HStoreField(blank=True, default=dict, help_text='Unique key(s) for ansible callback', null=True, verbose_name='unique keys')),
                ('hosted', models.CharField(blank=True, max_length=200, null=True)),
                ('processors', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('disks', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('lvm', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('lsblk', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('mounts', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('memory', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('ipaddresses', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('ipv4', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('ipv6', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('interfaces', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('svc', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('containers', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('hardware', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('os', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('runner', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('virtualmachines', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('sdn', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('prefixes', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='devices', to='core.Project')),
                ('provider', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='devices', to='core.Provider')),
                ('tags', models.ManyToManyField(blank=True, help_text='Select tag(s)', to='core.Tag', verbose_name='tags')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Credential',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=50)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('kind', models.CharField(default='generic', max_length=200)),
                ('inputs', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('cloud', models.BooleanField(default=False, verbose_name='cloud credential')),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='credentials', to='account.Organization')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Credential',
                'verbose_name_plural': 'Credentials',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Container',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(blank=True, max_length=100)),
                ('description', models.CharField(blank=True, max_length=100)),
                ('hosted', models.CharField(blank=True, max_length=200)),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='containers', to='account.Organization')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Billing',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(blank=True, max_length=100)),
                ('label', models.CharField(blank=True, max_length=200)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('action', models.CharField(blank=True, choices=[('start', 'Start'), ('stop', 'Stop'), ('check', 'Check'), ('deploy', 'Deploy'), ('reconfigure', 'Reconfigure'), ('remove', 'Remove')], default='start', max_length=200)),
                ('ahomefile', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('target', models.CharField(blank=True, max_length=200)),
                ('kind', models.CharField(default='generic', max_length=200)),
                ('hosted', models.CharField(blank=True, max_length=200)),
                ('opts', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('status', models.CharField(blank=True, choices=[('new', 'New'), ('pending', 'Pending'), ('waiting', 'Waiting'), ('starting', 'Starting'), ('running', 'Running'), ('successful', 'Successful'), ('failed', 'Failed'), ('error', 'Error'), ('canceled', 'Canceled')], default='running', max_length=200)),
                ('output', models.CharField(blank=True, max_length=200)),
                ('ident', models.CharField(blank=True, max_length=200)),
                ('uuid', models.UUIDField(default=uuid.uuid4)),
                ('cloud', models.BooleanField(default=False, verbose_name='cloud based')),
                ('unique_keys', django.contrib.postgres.fields.hstore.HStoreField(blank=True, default=dict, help_text='Unique key(s) for ansible callback', null=True, verbose_name='unique keys')),
                ('source', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('credentials', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('definition', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('facts', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('setfacts', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('inputs', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('applications', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True, default=list, size=None)),
                ('schema', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('runner', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('iaas', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='billings', to='core.IaaS')),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='billings', to='core.Project')),
                ('tags', models.ManyToManyField(blank=True, help_text='Select tag(s)', to='core.Tag', verbose_name='tags')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Backup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(blank=True, max_length=100)),
                ('label', models.CharField(blank=True, max_length=200)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('action', models.CharField(blank=True, choices=[('start', 'Start'), ('stop', 'Stop'), ('check', 'Check'), ('deploy', 'Deploy'), ('reconfigure', 'Reconfigure'), ('remove', 'Remove')], default='start', max_length=200)),
                ('ahomefile', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('target', models.CharField(blank=True, max_length=200)),
                ('kind', models.CharField(default='generic', max_length=200)),
                ('hosted', models.CharField(blank=True, max_length=200)),
                ('opts', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('status', models.CharField(blank=True, choices=[('new', 'New'), ('pending', 'Pending'), ('waiting', 'Waiting'), ('starting', 'Starting'), ('running', 'Running'), ('successful', 'Successful'), ('failed', 'Failed'), ('error', 'Error'), ('canceled', 'Canceled')], default='running', max_length=200)),
                ('output', models.CharField(blank=True, max_length=200)),
                ('ident', models.CharField(blank=True, max_length=200)),
                ('uuid', models.UUIDField(default=uuid.uuid4)),
                ('cloud', models.BooleanField(default=False, verbose_name='cloud based')),
                ('unique_keys', django.contrib.postgres.fields.hstore.HStoreField(blank=True, default=dict, help_text='Unique key(s) for ansible callback', null=True, verbose_name='unique keys')),
                ('source', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('credentials', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('definition', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('facts', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('setfacts', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('inputs', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('applications', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True, default=list, size=None)),
                ('schema', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('runner', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('iaas', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='backups', to='core.IaaS')),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='backups', to='core.Project')),
                ('tags', models.ManyToManyField(blank=True, help_text='Select tag(s)', to='core.Tag', verbose_name='tags')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Aggregate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('family', models.PositiveSmallIntegerField(choices=[(4, 'IPv4'), (6, 'IPv6')], editable=False)),
                ('prefix', core.fields.IPNetworkField()),
                ('date_added', models.DateField(blank=True, null=True)),
                ('description', models.CharField(blank=True, max_length=100)),
                ('hosted', models.CharField(blank=True, max_length=200, null=True)),
                ('definition', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('kind', models.CharField(blank=True, default='aggregate', max_length=200)),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='aggregates', to='core.Project')),
                ('rir', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='aggregates', to='core.Rir', verbose_name='RIR')),
            ],
            options={
                'ordering': ['family', 'prefix'],
            },
        ),
        migrations.AlterUniqueTogether(
            name='project',
            unique_together={('name', 'organization')},
        ),
    ]
