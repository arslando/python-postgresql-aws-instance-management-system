"""
Django settings for ahome project.
Generated by 'django-admin startproject' using Django 2.2.3.
"""
from datetime import timedelta
import os, sys
import logging, socket
from sysutils.utils.json_patch import *     # noqa

#from django.utils.translation import ugettext_lazy as _


def env_setting(setting, default=None):
    try:
        return os.environ[setting]
    except KeyError:
        print (u"### No Environ Setting for {:<20} Using default: '{}'".format(setting, default))
        return default


ENVIRONMENT_MODE = env_setting('ENVIRONMENT_MODE', 'DEVELOP')
DEBUG = ENVIRONMENT_MODE not in ('PRODUCTION', )

HOST_NAME = os.environ.get('HOST') or socket.gethostname()

# Billing
HOURS_IN_MONTH = 730


class RabbitLogFilter(logging.Filter):
    def filter(self, rec):
        rec.hostname = HOST_NAME
        return True


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
os.environ['BASE_DIR'] = BASE_DIR


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '-_hr+ccsyfxz8v9k#7vv(rnbl*ejkpv-()%ez)$1jfa=@p927&'

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True

# ALLOWED_HOSTS = []
ALLOWED_HOSTS = ['*']


DEVSERVER_DEFAULT_ADDR = env_setting('DEVSERVER_DEFAULT_ADDR', '0.0.0.0')
DEVSERVER_DEFAULT_PORT = env_setting('DEVSERVER_DEFAULT_PORT', 8001)

WEBSSH_BASE_URL = env_setting('WEBSSH_PROXY_URL', "http://127.0.0.1:9001/")

SOCKETIO_SERVER = 'http://localhost:8080'


SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}




CORS_ORIGIN_WHITELIST = [
    "http://127.0.0.1:8001",
    "http://127.0.0.1:8043", # TODO - FIXME
    "https://127.0.0.1:8043",
    "http://127.0.0.1:8043",
    # "https://sub.example.com",
    "http://localhost:8001",
    "http://localhost:8080",
    "https://localhost:8043",
    # "http://127.0.0.1:9000"
]

CORS_ORIGIN_ALLOW_ALL = True    # for test purposes only


MIDDLEWARE_CLASSES_CORS = (
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
)



# AHOME
# AHOME_INTERNAL_API = "/api"
# AHOME_INTERNAL_API = "http://127.0.0.1:8001/api"
# AHOME_INTERNAL_API = "https://127.0.0.1:8043/api"
#AHOME_INTERNAL_API = "http://localhost:8001/api"

#AHOME_INTERNAL_API = "http://127.0.0.1:8001/api"

AHOME_INTERNAL_API = "http://192.168.2.15:8001/api"

AHOME_INTERNAL_API_VERSION = "v1"
AHOME_PROOT_BASE_PATH = "/opt/tmp"
AHOME_SSKEYROOT_BASE_PATH = "/opt/tmp/ssh"
AHOME_VM_INFO_FOLDER = os.path.join(AHOME_PROOT_BASE_PATH, "vm")

# ANSIBLE
ANSIBLE_VENV_PATH = "/venv/ansible"



# -- NETBOX
# ENFORCE_GLOBAL_UNIQUE = getattr(configuration, 'ENFORCE_GLOBAL_UNIQUE', False)
ENFORCE_GLOBAL_UNIQUE = False

# Rabbit

RABBIT_HOST     = env_setting('RABBIT_HOST', '127.0.0.1')
RABBIT_PORT     = env_setting('RABBIT_PORT', 5672)
RABBIT_USERNAME = env_setting('RABBIT_USERNAME', 'guest')
RABBIT_PASSWORD = env_setting('RABBIT_PASSWORD', 'guest')
RABBIT_VHOST    = env_setting('RABBIT_VHOST', '/')

# -- CELERY

## - RabbitMQ
# CELERY_BROKER_URL = 'amqp://localhost'

## - Redis
CELERY_BROKER_URL = 'redis://{}:6379/0'.format(env_setting('REDIS_HOST_NAME', 'redis'))

CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

CELERY_RESULT_BACKEND = 'django-db'
CELERY_CACHE_BACKEND = 'django-cache'

CELERY_WORKER_COMMAND = ['celery', 'worker', '-A', 'ahome', '-l', 'info', '-O', 'fair', '--without-gossip']
#CELERY_WORKER_COMMAND = ['watchmedo', 'auto-restart', '--directory=./core/tasks/', '--pattern=*.py', '--recursive',  '--', 'celery', 'worker', '-A', 'ahome', '-l', 'info', '-O', 'fair', '--without-gossip']


# # For RabbitMQ
# BROKER_URL = 'amqp://[ipaddress]'
# CELERY_RESULT_BACKEND = 'amqp://[ipaddress]'
# # Celery Data Format
# CELERY_ACCEPT_CONTENT = ['application/json']
# CELERY_TASK_SERIALIZER = 'json'
# CELERY_RESULT_SERIALIZER = 'json'
# CELERY_TIMEZONE = 'Asia/Kolkata'


# -- CHANNEL

# CHANNEL_LAYERS = {
#     'default': {
#         'BACKEND': 'asgi_rabbitmq.RabbitmqChannelLayer',
#         # Change according to your project layout:
#         'ROUTING': 'ahome.routing.channel_routing',
#         'CONFIG': {
#             'url': 'amqp://guest:guest@rabbitmq:5672/%2F',
#         },
#     },
# }

# ## CHANNEL - inmemory

# CHANNEL_LAYERS = {
#     "default": {
#         "BACKEND": "asgiref.inmemory.ChannelLayer",
#         "ROUTING": "ahome.core.channel_routing",
#     },
# }




## -- CHANNEL SSL

# from urllib import urlencode

# CHANNEL_LAYERS = {
#     'default': {
#         'BACKEND': 'asgi_rabbitmq.RabbitmqChannelLayer',
#         'ROUTING': 'myproject.routing.routes',
#         'CONFIG': {
#             'url': 'amqps://guest:guest@rabbitmq:5672/%2F?' + urlencode({
#                        'ssl_options': {
#                            'certfile': '/etc/ssl/mycert.pem',
#                            'keyfile': '/etc/ssl/mykey.pem',
#                        }
#                    }),
#         },
#     },
# }
REDIS_HOST     = env_setting('REDIS_HOST', 'redis')
REDIS_PORT     = env_setting('REDIS_PORT', 6379)


CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [(REDIS_HOST, REDIS_PORT)],
        },
    },
}

CHANNEL_GROUP_NOTIFICATIONS = "notifications"


# REDIS_HOST = os.getenv('REDIS_HOST', '127.0.0.1')
# BROKER_URL = 'redis://{}:6379/0'.format(REDIS_HOST)
# CHANNEL_LAYERS = {
#     "default": {
#         "BACKEND": "channels_redis.core.RedisChannelLayer",
#         "CONFIG": {
#             "hosts": ['redis://{}:6379/1'.format(REDIS_HOST)],
#         },
#     },
# }

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.postgres',
    'widget_tweaks',
    'drf_yasg',
    'django_filters',
    'channels',
    'django_celery_results',
    'celery_progress',
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'django_extensions',

    'components.async_proxy',
    'ahome',    # for commands only
    'account',
    'core',
    'frontend',
    'socketio_app',

    # 'webpack_loader',

    # 'compressor',
    # 'compressor_toolkit',

    # 'djng',
    # 'easy_thumbnails',
]


# STATICFILES_FINDERS = (
#     'django.contrib.staticfiles.finders.FileSystemFinder',
#     'django.contrib.staticfiles.finders.AppDirectoriesFinder',
#     # other finders..
#     'compressor.finders.CompressorFinder',
#     # 'compressor.finders.CompressorFinder',
# )


# COMPRESS_CSS_FILTERS = [
#     'compressor.filters.css_default.CssAbsoluteFilter',
#     'compressor.filters.cssmin.CSSMinFilter',
#     'compressor.filters.template.TemplateFilter'
# ]
# COMPRESS_JS_FILTERS = [
#     'compressor.filters.jsmin.JSMinFilter',
# ]
# COMPRESS_PRECOMPILERS = (
#     ('module', 'compressor_toolkit.precompilers.ES6Compiler'),
#     ('css', 'compressor_toolkit.precompilers.SCSSCompiler'),
# )

# COMPRESS_PRECOMPILERS = (
#     ('text/x-scss', 'compressor_toolkit.precompilers.SCSSCompiler'),
#     ('module', 'compressor_toolkit.precompilers.ES6Compiler'),
# )

# COMPRESS_PRECOMPILERS = (
#     ('module', 'compressor_toolkit.precompilers.ES6Compiler'),
# )

# COMPRESS_ROOT = 'frontend/static/' # this is the location in the file system where your javascript files are, and also where the bundled file will be written to


# COMPRESS_ENABLED = True
# # COMPRESS_OFFLINE = True
# # COMPRESS_ES6_COMPILER_CMD = 'export NODE_PATH="{paths}" && ' \
# #       '{browserify_bin} "{infile}" -o "{outfile}" '  \
# #       '-t [ "{node_modules}/babelify" --presets="{node_modules}/babel-preset-env" ]'
# # COMPRESS_LOCAL_NPM_INSTALL = False


# WEBPACK_LOADER = {
#     'DEFAULT': {
#         'BUNDLE_DIR_NAME': 'bundles/',
#         'STATS_FILE': os.path.join(BASE_DIR, 'webpack-stats.json'),
#     }
# }



MIDDLEWARE = [
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ahome.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ahome.wsgi.application'

# ASGI_APPLICATION = "ahome.routing.application"
ASGI_APPLICATION = 'ahome.routing.application'


# TODO it is really required?
XX_SWAGGER_SETTINGS = {
   'DEFAULT_INFO': 'ahome.urls.api_info',
}


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#     }
# }


from . import database

DATABASES = {
    'default': database.config()
}



# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]



REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.URLPathVersioning',
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],

    'DEFAULT_AUTHENTICATION_CLASSES': [
            'rest_framework.authentication.BasicAuthentication',
            'rest_framework.authentication.SessionAuthentication',
            'rest_framework.authentication.TokenAuthentication',
            'rest_framework_simplejwt.authentication.JWTAuthentication',
        ],
    'DEFAULT_PERMISSION_CLASSES': (
            'rest_framework.permissions.IsAuthenticated',
        ),
}


DEFAULT_PAGE_SIZE = 100
AUTH_USER_MODEL = 'account.User'
PERMISSION_CACHE_TIMEOUT = 2

LOGIN_URL = "login"
LOGIN_REDIRECT_URL = "index"
LOGOUT_REDIRECT_URL = "login"

AHOMEMODULES_PATH  = "{}/ahomemodules".format(BASE_DIR)
AHOMEMAPPINGS_PATH = "{}/ahomemappings".format(BASE_DIR)
AHOME_LOCAL_ANSIBLE_PLAYBOOKS_PATH = "{}/playbooks".format(BASE_DIR)
AHOME_LOCAL_ANSIBLE_ROLES_PATH = "{}/playbooks/roles".format(BASE_DIR)
# AHOMEMAPPINGS_PATH = "/ahome_devel/ahomemappings"


STATUS_CHOICES = [
    ('new', 'New'),                  # Job has been created, but not started.
    ('pending', 'Pending'),          # Job is pending Task Manager processing (blocked by dependency req, capacity or a concurrent job)
    ('waiting', 'Waiting'),          # Job has been assigned to run on a specific node (and is about to run).
    ('starting', 'Starting'),        # Job is starting.
    ('running', 'Running'),          # Job is currently running.
    ('successful', 'Successful'),    # Job completed successfully.
    ('failed', 'Failed'),            # Job completed, but with failures.
    ('error', 'Error'),              # The job was unable to run.
    ('canceled', 'Canceled'),        # The job was canceled before completion.
]

# DESIRED STATE
STATE_CHOICES = [
    ('running', 'Running'),     # Object must be up and running.
    ('stoppped', 'Stopped'),    # Object must be set to down and must *not* set as running.
]

DEFAULT_ORGANISATION_NAME = "General"



# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_L10N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/
PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))

STATIC_ROOT = os.path.join(PROJECT_ROOT, 'staticfiles')
STATIC_URL = '/static/'

# Extra places for collectstatic to find static files.
STATICFILES_DIRS = (
    os.path.join(PROJECT_ROOT, 'static'),
    os.path.join(BASE_DIR, 'static'),
    ('src', os.path.join(BASE_DIR, 'src')),
    os.path.join(BASE_DIR, 'frontend', 'static'),
)

# Simplified static file serving.
# https://warehouse.python.org/project/whitenoise/

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'




### %<-----

# STATIC_URL = '/static/'

# STATIC_ROOT = os.path.join(BASE_DIR, 'public', 'static')
# # STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# MEDIA_ROOT = os.path.join(BASE_DIR, 'public', 'media')
# # MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# STATICFILES_DIRS = (
#     os.path.join(BASE_DIR, 'frontend', 'static'),
#     os.path.join(BASE_DIR, 'src'),
#     ('node_modules', os.path.join(BASE_DIR, 'node_modules')),
#     ('src', os.path.join(BASE_DIR, 'src')),
#     os.path.join(BASE_DIR, 'static'),
#     os.path.join(BASE_DIR, 'assets'),
# )

### %<-----




# JSONFORMS_SCHEMA_DIR = (
#     os.path.join(BASE_DIR, 'static'),
# )

JSONFORMS_SCHEMA_DIR = [
    os.path.join(BASE_DIR, "static"),
]


# CELERYD_HIJACK_ROOT_LOGGER = True


CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
        'TIMEOUT': 60,
        'OPTIONS': {
            'MAX_ENTRIES': 1000
        }
    }
}

DEFAULT_CACHE_TIME = 60 * 20

try:
    if env_setting('APPLICATION_ENVIRONMENT') == 'DOCKER':
        from ._docker_settings import *
        print("**** Special DOCKER settings are loaded ****")
    else:
        # from . _local_settings import *
        # print("**** Local settings are loaded ****")
        print("**** Local settings are SKIPPED ****")
except:
    pass


from . settings_logging import logging_config, logging_config_no_rabbit
if os.environ.get('CURRENT_APPLICATION', "UNDEF") == "DJANGO.COMMAND":
    LOGGING = logging_config_no_rabbit(sys.modules[__name__])
else:
    LOGGING = logging_config_no_rabbit(sys.modules[__name__])
