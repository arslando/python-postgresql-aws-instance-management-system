---

- name: Return ture(0) if domain exist
  command: "virsh --connect qemu:///system dominfo {{ vm_name }}"
  register: vm_exist
  ignore_errors: yes

- block:

  - name: Get guest-agent command
    shell: >
       virsh --connect qemu:///system qemu-agent-command {{ vm_name }} '{"execute":"guest-network-get-interfaces"}'
    register: qemu_info


  - set_fact:
      output_json: "{{ qemu_info.stdout | from_json }}"

  - debug: var=output_json

  - debug: msg={{ output_json.return | selectattr("name", "equalto", "eth0") | map(attribute='hardware-address') | list }}

  - debug: msg={{ output_json.return | selectattr("name", "equalto", "eth0") | map(attribute='ip-addresses') | list }}

  - debug: msg={{ output_json.return | selectattr("name", "equalto", "eth0") | list }}

  
  when: vm_exist.rc == 0 and not vm_recreate|bool

- block:

  - name: If vm exist and vm_recreate is false, playbook fails
    fail:
      msg: "The vm exist and vm_recreate is false"
    when: vm_exist.rc == 0 and not vm_recreate|bool

  - name: Undefine existing VM
    command: " virsh --connect qemu:///system {{ item }} {{ vm_name }} "
    with_items:
    - destroy
    - undefine
    ignore_errors: yes
    when: vm_exist.rc == 0 and vm_recreate|bool

  - name: Check if CentOS cloud-init image exist.
    stat:
      path: "{{ kvm_vm_pool_dir }}/{{ cloud_init_vm_image }}"
    register: cloud_init_image_exist

  - debug: msg="{{ kvm_vm_pool_dir }}/{{ cloud_init_vm_image }}"

  - name: Download CentOS Cloud-init image 
    get_url:
      url: "{{ cloud_init_vm_image_link }}"
      dest: "{{ kvm_vm_pool_dir }}/{{ cloud_init_vm_image }}"
      mode: 0777
    when: not cloud_init_image_exist.stat.exists

  - name: Copy cloud-init user data
    template: "src=user-data.j2 dest={{ cloud_init_user_data }} mode=0777"


  - name: Generate cloud-init meta data
    copy: 
      dest: "{{ cloud_init_meta_data }}"
      content: |
        instance-id: {{ vm_name }}
        hostname: {{ vm_hostname }}
        local-hostname: {{ vm_local_hostname }}


  - name: Create root disk based on cloud init img
    command: "qemu-img create -b {{ kvm_vm_pool_dir }}/{{ cloud_init_vm_image }} -f qcow2 {{ kvm_vm_pool_dir }}/{{ vm_name }}.qcow2 {{ vm_root_disk_size }}"


  - name: Create iso image for cloud init
    shell: "genisoimage -output {{ cloud_init_iso_image }} -volid cidata -joliet -r {{ cloud_init_user_data }} {{ cloud_init_meta_data }}"


  - name: Deploy a new VM
    command: >
       virt-install --connect qemu:///system --import --name {{ vm_name }} --ram {{ vm_memory }}  --vcpus {{vm_cpu}}
       --disk {{ kvm_vm_pool_dir }}/{{vm_name}}.qcow2,format=qcow2,bus=virtio --disk  {{ cloud_init_iso_image }},device=cdrom --network network:{{ vm_network_br|default('default') }},model=virtio --os-type=linux --os-variant=rhel7 --noautoconsole


  - name: Get guest-agent command
    shell: >
       virsh --connect qemu:///system qemu-agent-command {{ vm_name }} '{"execute":"guest-network-get-interfaces"}'
    register: qemu_info
    retries: 5
    delay: 3
    until: qemu_info.rc == 0

  - debug: var=qemu_info

  when: vm_exist.rc > 0 and vm_recreate|bool


# - name: Get MAC address
#   shell: >
#      virsh --connect qemu:///system dumpxml {{ vm_name }} | awk -F\' '/mac address/ {print $2}'
#   register: mac_info

# - name: Gather bridge device name
#   shell: >
#     virsh --connect qemu:///system net-info {{ vm_network_br | default('default') }}|grep Bridge|awk '{print $2}'
#   register: vm_network_br_dev_name

# - name: Wait for IP Ready of the VM
#   wait_for:
#     path: "/var/lib/libvirt/dnsmasq/{{ vm_network_br_dev_name.stdout }}.status"
#     search_regex: "{{ mac_info.stdout }}"


# - name: Gather IP address of the VM
#   shell: >
#      grep -B1 {{ mac_info.stdout }} /var/lib/libvirt/dnsmasq/{{ vm_network_br_dev_name.stdout }}.status | head -n 1 | awk '{print $2}' | sed -e s/\"//g -e s/,//
#   register: vm_ip


# - debug: var=vm_ip

# - name: Eject CD-Rom
#   shell: "virsh --connect qemu:///system change-media {{ vm_name }} hda --eject --config"


# - name: Clean up cloud init files
#   file: state=absent path="{{ item }}"
#   with_items:
#   - "{{ cloud_init_user_data }}"
#   - "{{ cloud_init_iso_image }}"
#   become: yes
#   delegate_to: "{{ kvm_install_host }}"

